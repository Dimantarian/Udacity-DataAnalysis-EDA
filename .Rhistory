# install.packages('corrplot')
library(corrplot)
corrplot()
?ggcorr
ggcorr(redWine[, 2:13], geom = 'text')
#Let's look at alcohol, citric acids and sultphates
g1 <-
ggplot(redWine,aes(as.factor(quality),citric.acid)) +
geom_violin(trim=FALSE, fill='#A4A4A4', color="darkred") +
geom_boxplot(width=0.1) +
scale_fill_brewer(palette="Reds") +
theme_minimal()
g2 <- ggplot(redWine,aes(as.factor(quality),sulphates)) +
geom_violin(fill = 'red')
g3 <- ggplot(redWine,aes(as.factor(quality),alcohol)) +
geom_violin(fill = 'yellow')
library(gridExtra)
grid.arrange(g1, g2, g3, ncol=3)
ggplot(aes(x=citric.acid, y = sulphates), data = redWine) +
geom_point(aes(alpha = 0.2, color = quality)) +
geom_smooth(method = lm)
#install.packages("ggthemes") # Install
library(ggthemes) # Load
ggplot(aes(x=citric.acid, y = sulphates), data = subset(redWine,redWine$citric.acid<1)) +
geom_point(aes(color = as.factor(quality))) +
geom_smooth(method = lm, color = 'black', fill = 'pink')  +
coord_cartesian(ylim = c(0.25,1.25)) +
scale_colour_grey() +
theme_tufte()
# +
#   scale_color_economist()
sd(redWine$sulphates)
sd(redWine$citric.acid)
redWine$quality<-factor(redWine$quality,levels = c(3,4,5,6,7,8))
ggplot(aes(x=sulphates, y = chlorides), data = redWine) +
geom_point(aes(color = as.factor(quality))) +
geom_smooth(color = 'black', fill = 'red', method = loess) +
coord_cartesian(xlim = c(min(redWine$sulphates),1.5)) +
scale_colour_grey() +
theme_economist()
redWine.wine_by_quality <- redWine %>%
group_by(quality) %>%
summarise(al.stdDev = sd(alcohol),
al.mean = mean(alcohol),
al.median = min(alcohol),
al.n = n()) %>%
arrange(quality)
qplot(x=quality, y = al.stdDev, data = redWine.wine_by_quality) +
geom_smooth(color = 'blue', fill = 'steelblue', method = lm)
theme_tufte()
redWine.wine_by_quality <- redWine %>%
group_by(quality) %>%
summarise(al.stdDev = sd(alcohol),
al.mean = mean(alcohol),
al.median = min(alcohol),
al.n = n()) %>%
arrange(quality)
View(redWine.wine_by_quality)
qplot(x=quality, y = al.stdDev, data = redWine.wine_by_quality) +
geom_smooth(color = 'blue', fill = 'steelblue', method = lm)
theme_tufte()
qplot(x=quality, y = al.stdDev, data = redWine.wine_by_quality) +
geom_smooth(color = 'blue', fill = 'steelblue', method = lm) +
theme_tufte()
qplot(x=quality, y = al.stdDev, data = redWine.wine_by_quality) +
geom_smooth() +
theme_tufte()
qplot(x=quality, y = al.stdDev, data = redWine.wine_by_quality) +
geom_smooth()
ggplot(aes(x=quality, y = al.stdDev), data = redWine.wine_by_quality) +
geom_point() +
geom_smooth()
ggplot(aes(x=quality, y = al.stdDev), data = redWine.wine_by_quality) +
geom_point()
ggplot(aes(x=quality, y = al.stdDev), data = redWine.wine_by_quality) +
geom_point() +
geom_smooth()
ggplot(aes(x=quality, y = al.stdDev), data = redWine.wine_by_quality) +
geom_point() +
geom_smooth()
ggplot(aes(x=as.factor(quality), y = al.stdDev), data = redWine.wine_by_quality) +
geom_point() +
geom_smooth()
qplot(x=quality, y = al.stdDev, data = redWine.wine_by_quality) +
geom_smooth(color = 'blue', fill = 'steelblue', method = lm) +
theme_tufte()
ggplot(aes(x=quality, y = al.stdDev), data = redWine.wine_by_quality) +
geom_point() +
geom_smooth(color = 'blue', fill = 'steelblue', method = lm) +
theme_tufte()
ggplot(aes(x=quality, y = al.stdDev), data = redWine.wine_by_quality) +
geom_point(alpha=0.5) +
geom_smooth(color = 'blue', fill = 'steelblue', method = lm) +
theme_tufte()
ggplot(aes(x=quality, y = al.stdDev), data = redWine.wine_by_quality) +
geom_smooth(color = 'blue', fill = 'steelblue', method = lm) +
theme_tufte()
ggplot(aes(x=quality, y = al.stdDev), data = redWine.wine_by_quality) +
geom_smooth() +
theme_tufte()
ggplot(aes(x=sulphates, y = chlorides), data = redWine) +
geom_point(aes(color = as.factor(quality))) +
geom_smooth(color = 'black', fill = 'red', method = loess) +
coord_cartesian(xlim = c(min(redWine$sulphates),1.5)) +
scale_colour_grey() +
theme_economist()
ggplot(aes(x=quality, y = al.stdDev), data = redWine.wine_by_quality) +
geom_point() +
geom_smooth(color = 'black', fill = 'red', method = loess)  +
theme_economist()
ggplot(aes(x=quality, y = al.stdDev), data = redWine.wine_by_quality) +
geom_line() +
geom_smooth(color = 'black', fill = 'red', method = loess)  +
theme_economist()
ggplot(aes(x=quality, y = al.stdDev), data = redWine.wine_by_quality) +
geom_line()
ggplot(aes(x=quality, y = al.stdDev), data = redWine.wine_by_quality) +
geom_point()
ggplot(aes(x=quality, y = al.stdDev), data = redWine.wine_by_quality) +
geom_bar()
ggplot(aes(x=quality, y = al.stdDev), data = redWine.wine_by_quality) +
geom_count()
ggplot(aes(x=quality, y = al.stdDev), data = redWine.wine_by_quality) +
geom_point()
debugSource('C:/Users/geeky/Dropbox/Learning/MOOCs/Udacity/Data Analysis NanoDegree/EDA/Project/Udacity-DataAnalysis-EDA/testloop.R', echo=TRUE)
ggplot(aes(x=quality, y = al.stdDev), data = redWine.wine_by_quality) +
geom_line()
ggplot(aes(x=as.factor(quality), y = al.stdDev), data = redWine.wine_by_quality) +
geom_line()
ggplot(aes(x=as.factor(quality), y = al.stdDev), data = redWine.wine_by_quality) +
geom_point()
ggplot(aes(x=as.factor(quality), y = al.stdDev), data = redWine.wine_by_quality) +
geom_point() + geom_smooth()
ggplot(aes(x=as.factor(quality), y = al.stdDev), data = redWine.wine_by_quality) +
geom_point() +
geom_smooth() +
theme_tufte()
# Install
install.packages("FactoMineR")
# Load
library("FactoMineR")
install.packages("factoextra")
library("factoextra")
View(redWine)
?kmeans
km.res <- kmeans(scale(redWine[,2:12]), 4, nstart = 25)
View(km.res)
fviz_cluster(km.res, data = df,
palette = c("#00AFBB","#2E9FDF", "#E7B800", "#FC4E07"),
ggtheme = theme_minimal(),
main = "Partitioning Clustering Plot"
)
fviz_cluster(km.res, data = redWine[,2:12],
palette = c("#00AFBB","#2E9FDF", "#E7B800", "#FC4E07"),
ggtheme = theme_minimal(),
main = "Partitioning Clustering Plot"
)
set.seed(123)
km.res <- kmeans(scale(redWine[,2:12]), 4, nstart = 25)
fviz_cluster(km.res, data = redWine[,2:12],
ggtheme = theme_minimal(),
main = "Partitioning Clustering Plot"
)
km.res <- kmeans(scale(redWine[,2:12]), 5, nstart = 25)
fviz_cluster(km.res, data = redWine[,2:12],
ggtheme = theme_minimal(),
main = "Partitioning Clustering Plot"
)
km.res <- kmeans(scale(redWine[,2:12]),10, nstart = 25)
fviz_cluster(km.res, data = redWine[,2:12],
ggtheme = theme_minimal(),
main = "Partitioning Clustering Plot"
)
?fviz_cluster
km.res <- kmeans(scale(redWine[,2:12]),10, nstart = 25)
fviz_cluster(km.res,
data = redWine[,2:12],
geom = 'point',
ggtheme = theme_minimal(),
main = "Partitioning Clustering Plot"
)
set.seed(123)
km.res <- kmeans(scale(redWine[,2:12]),3, nstart = 25)
fviz_cluster(km.res,
data = redWine[,2:12],
geom = 'point',
ggtheme = theme_minimal(),
main = "Partitioning Clustering Plot"
)
fviz_nbclust(scale(redWine[,2:12]), kmeans, method = "gap_stat")
km.res <- kmeans(scale(redWine[,2:12]),2, nstart = 25)
fviz_cluster(km.res,
data = redWine[,2:12],
geom = 'point',
ggtheme = theme_minimal(),
main = "Partitioning Clustering Plot"
)
km.res <- kmeans(scale(redWine[,2:12]),4, nstart = 25)
fviz_cluster(km.res,
data = redWine[,2:12],
geom = 'point',
ggtheme = theme_minimal(),
main = "Partitioning Clustering Plot"
)
km.res <- kmeans(scale(redWine[,2:12]),3, nstart = 25)
fviz_cluster(km.res,
data = redWine[,2:12],
geom = 'point',
ggtheme = theme_minimal(),
main = "Partitioning Clustering Plot"
)
?kmeans
set.seed(1234)
km.res <- kmeans(scale(redWine[,2:12]),5, nstart = 25)
fviz_cluster(km.res,
data = redWine[,2:12],
geom = 'point',
ggtheme = theme_minimal(),
main = "kMeans Clustering Plot"
)
fviz_nbclust(scale(redWine[,2:12]), kmeans, method = "gap_stat")
?fviz_nbclust
fviz_nbclust(scale(redWine[,2:12]), kmeans, method = c("silhouette", "wss",
"gap_stat"))
fviz_nbclust(scale(redWine[,2:12]), kmeans, method = c("silhouette", "wss","gap_stat"))
fviz_nbclust(scale(redWine[,2:12]), kmeans, method = c("wss","gap_stat"))
fviz_nbclust(scale(redWine[,2:12]), kmeans, method = "wss")
fviz_nbclust(scale(redWine[,2:12]), kmeans, method = "gap_width")
fviz_nbclust(scale(redWine[,2:12]), kmeans, method = "gap_stat")
View(km.res)
km.res.cluster
km.res[1]
redWine$cluster<-km.res[1]
View(redWine)
test<-cbind(redWine,km.res[1])
View(test)
ggplot(aes(as.numeric(quality)), data = test) +
geom_histogram((aes(color = cluster)))
ggplot(aes(as.numeric(quality)), data = as.data.frame(test) +
geom_histogram((aes(color = cluster)))
)
ggplot(aes(as.numeric(quality)), data = as.data.frame(test)) +
geom_histogram((aes(color = cluster)))
ggplot(aes(quality), data = test) +
geom_histogram((aes(color = cluster)))
ggplot(aes(quality), data = test) +
geom_histogram((aes(color = as.factor(cluster)))
ggplot(aes(quality), data = test) +
geom_histogram(aes(color = as.factor(cluster)))
ggplot(aes(quality), data = test) +
geom_histogram(aes(color = as.factor(cluster)))
ggplot(aes(as.numeric(quality)), data = test) +
geom_histogram(aes(color = as.factor(cluster)))
test<-cbind(redWine,km.as.factor(res[1]))
test<-cbind(redWine,as.factor(km.res[1]))
test<-cbind(redWine,factor(km.res[1])
test<-cbind(redWine,factor(km.res[1]))
test<-cbind(redWine,factor(km.res[1]))
test<-cbind(redWine,km.res[1])
test$cluster <- factor(test$cluster)
test$cluster <- as.character(test$cluster)
View(test)
redWine <- read.csv(file = 'wineQualityReds.csv')
test<-cbind(redWine,km.res[1])
test$cluster <- as.character(test$cluster)
ggplot(aes(as.numeric(quality)), data = test) +
geom_histogram(aes(color = cluster))
ggplot(aes(x=quality), data = redWine) +
stat_count(geom = "bar", fill=cluster) +
theme_minimal()
ggplot(aes(x=quality), data = test) +
stat_count(geom = "bar", fill=cluster) +
theme_minimal()
View(test)
ggplot(aes(x=quality), data = test) +
stat_count(geom = "bar", color=cluster) +
theme_minimal()
ggplot(aes(x=quality), data = test) +
stat_count(geom = "bar", color=test$cluster) +
theme_minimal()
ggplot(aes(x=quality), data = test) +
stat_count(geom = "bar", aes(fill=cluster) +
theme_minimal()
ggplot(aes(x=quality), data = test) +
stat_count(geom = "bar", aes(fill=cluster)) +
theme_minimal()
ggplot(aes(x=quality), data = test) +
stat_count(geom = "bar", aes(fill=cluster)) +
theme_minimal()
# Load all of the packages that you end up using in your analysis in this code
# chunk.
## Install these if necessary
# options(repos=c(CRAN='cran.rstudio.com'))
# install.packages("factoextra")
# install.packages("FactoMineR")
# install.packages("dplyr")
# install.packages("ggthemes")
# install.packages('reshape2')
# install.packages('GGally')
# install.packages('scales')
# install.packages('memisc')
# install.packages('lattice')
# install.packages('MASS')
# install.packages('car')
# install.packages('reshape')
# install.packages('plyr')
# install.packages("ggplot2")
# install.packages('kableExtra')
# install.packages('gridExtra')
# load the ggplot graphics package and the others
library(ggplot2)
library(GGally)
library(scales)
library(memisc)
library(knitr)
library(kableExtra)
library(reshape2)
library(gridExtra)
library(ggthemes)
library(dplyr)
library(FactoMineR)
library(factoextra)
## Set some global options
options(knitr.table.format = "html")
# Load the Data
setwd('C:\\Users\\geeky\\Dropbox\\Learning\\MOOCs\\Udacity\\Data Analysis NanoDegree\\EDA\\Project\\Udacity-DataAnalysis-EDA')
redWine <- read.csv(file = 'wineQualityReds.csv')
redWine$X <- factor(redWine$X)
#High level summaries of the data
str(redWine)
## Create basic univariate statistics for all vars
for (i in  names(redWine)) {
if (i != 'X') {
assign(paste(i),summary(redWine[,i]))
}
}
## Present in a table using kable to make it pretty
redWine.summary <- rbind(alcohol,
chlorides,
citric.acid,
density,
fixed.acidity,
free.sulfur.dioxide,
pH,
residual.sugar,
sulphates,
total.sulfur.dioxide,
volatile.acidity,
quality)
kable(redWine.summary) %>%
kable_styling(bootstrap_options = c("striped", "hover","condensed")) %>%
add_footnote(c(
"All acids, sugars, sulphates and density are measured in g/dm^3",
"Chlorides and sulphur dioxides are measured in mg/dm^3",
"Alcohol is measured in % by volume",
"Quality is a score between 1 and 10"), notation = "symbol")
ggplot(aes(x=alcohol), data = redWine) +
geom_histogram() +
theme_minimal()
## Create histograms for all variables (Excluding X)
ggplot(data = melt(redWine), mapping = aes(x = value)) +
geom_histogram(bins = 30) + facet_wrap(~variable, scales = 'free_x') +
theme_minimal()
## Add the strength boundaries for later
redWine$strength.category <- factor(
ifelse(redWine$alcohol < 10 ,'Wk',
ifelse(redWine$alcohol < 12.5, 'Mod',
ifelse(redWine$alcohol < 14.5, 'Str'
, 'Aus')
)
), levels = c('Wk','Mod','Str','Aus')
)
ggplot(aes(x=quality), data = redWine) +
stat_count(geom = "bar") +
theme_minimal()
ggcorr(redWine[, 2:13], geom = 'circle', min_size = 5, max_size = 15) +
theme_minimal()
##Change quality to a factor
redWine$quality <- factor(redWine$quality)
ggpairs(redWine[, 2:13],mapping = aes(alpha=0.05)) +
theme_minimal()
ggplot(redWine,aes(quality,citric.acid)) +
geom_violin(trim=FALSE, fill='lightskyblue1', color="midnightblue") +
geom_boxplot(width=0.1) +
theme_minimal()
ggplot(aes(x=citric.acid, y = sulphates), data = redWine) +
geom_point(aes(alpha = 0.2, color = quality)) +
geom_smooth()
ggplot(aes(x=citric.acid, y = sulphates), data = subset(redWine,redWine$citric.acid<1)) +
geom_point(aes(color = quality)) +
geom_smooth(color = 'black', fill = 'pink', method = lm)  +
coord_cartesian(ylim = c(0.25,1.25)) +
scale_colour_grey() +
theme_tufte()
ggplot(redWine,aes(quality,sulphates)) +
geom_violin(trim=FALSE, fill='steelblue3', color="midnightblue") +
geom_boxplot(width=0.1) +
theme_minimal()
ggplot(aes(x=sulphates, y = chlorides), data = redWine) +
geom_point(aes(color = quality)) +
geom_smooth(color = 'black', fill = 'red', method = loess) +
coord_cartesian(xlim = c(min(redWine$sulphates),1.5)) +
scale_colour_grey() +
theme_economist()
ggplot(redWine,aes(quality,alcohol)) +
geom_violin(trim=FALSE, fill='steelblue4', color="midnightblue") +
geom_boxplot(width=0.1) +
theme_minimal()
redWine.wine_by_quality <- redWine %>%
group_by(quality) %>%
summarise(al.stdDev = sd(alcohol),
al.mean = mean(alcohol),
al.median = median(alcohol),
al.n = n()) %>%
arrange(quality)
kable(redWine.wine_by_quality) %>%
kable_styling(bootstrap_options = c("striped", "hover","condensed"))
#Run the clustering algorithm
set.seed(1234)
km.res <- kmeans(scale(redWine[,2:12]),5, nstart = 25)
fviz_cluster(km.res,
data = redWine[,2:12],
geom = 'point',
ggtheme = theme_minimal(),
main = "kMeans Clustering Plot k=5"
)
#determine optimal cluster size
fviz_nbclust(scale(redWine[,2:12]), kmeans, method = "gap_stat")
#determine optimal cluster size
km.res.2 <- kmeans(scale(redWine[,2:12]),2, nstart = 25)
km.res.3 <- kmeans(scale(redWine[,2:12]),3, nstart = 25)
kmg.2 <- fviz_cluster(km.res.2,
data = redWine[,2:12],
geom = 'point',
ggtheme = theme_minimal(),
main = "kMeans Clustering Plot k=2"
)
kmg.3 <- fviz_cluster(km.res.3,
data = redWine[,2:12],
geom = 'point',
ggtheme = theme_minimal(),
main = "kMeans Clustering Plot k=3"
)
grid.arrange(kmg.2, kmg.3, ncol=2)
## Bind the clusters to the original dataframe
redWine.clusters <- cbind(redWine,km.res.3[1])
## Plot it!
ggplot(aes(x=quality), data = redWine.clusters) +
stat_count(geom = "bar", aes(fill=cluster)) +
theme_minimal()
## Tabulate it!
redWine.wine_by_cluster <- redWine.clusters %>%
group_by(cluster) %>%
summarise(c.stdDev = sd(as.numeric(quality)),
c.mean = mean(as.numeric(quality)),
c.median = median(as.numeric(quality)),
c.n = n()) %>%
arrange(cluster)
kable(redWine.wine_by_cluster) %>%
kable_styling(bootstrap_options = c("striped", "hover","condensed"))
ggplot(aes(x=quality), data = redWine.clusters) +
stat_count(geom = "bar", aes(fill=cluster)) +
theme_minimal()
ggplot(aes(x=quality), data = test) +
stat_count(geom = "bar", aes(fill=cluster)) +
theme_minimal()
str(test)
str(redWine.clusters)
redWine.clusters$cluster <- as.character(redWine.clusters$cluster)
ggplot(aes(x=quality), data = redWine.clusters) +
stat_count(geom = "bar", aes(fill=cluster)) +
theme_minimal()
ggplot(aes(x=quality), data = test) +
stat_count(geom = "bar", aes(fill=cluster),position = 'fill') +
theme_minimal()
km.res <- kmeans(scale(redWine[,2:12]),4, nstart = 25)
fviz_cluster(km.res,
data = redWine[,2:12],
geom = 'point',
ggtheme = theme_minimal(),
main = "kMeans Clustering Plot"
)
test<-cbind(redWine,km.res[1])
test$cluster <- as.character(test$cluster)
km.res[1]
ggplot(aes(as.numeric(quality)), data = test) +
geom_histogram(aes(fill = cluster))
ggplot(aes(x=quality), data = test) +
stat_count(geom = "bar", aes(fill=cluster),position = 'fill') +
theme_minimal()
ggcorr(redWine[, 2:13], geom = 'circle', min_size = 5, max_size = 15) +
theme_minimal()
ggcorr(redWine[, 2:13], geom = 'circle', min_size = 5, max_size = 15) +
labs(title = 'Red Wine Correlation Matrix', caption = 'Visualising linear
relations between variables')
ggcorr(redWine[, 2:13], geom = 'circle', min_size = 5, max_size = 15) +
labs(title = 'Red Wine Correlation Matrix', caption = 'Visualising linear
relationships between variables')
View(redWine)
ggcorr(redWine[, 2:14], geom = 'circle', min_size = 5, max_size = 15) +
labs(title = 'Red Wine Correlation Matrix', caption = 'Visualising linear
relationships between variables')
theme_minimal()
ggcorr(redWine[, 2:14], geom = 'circle', min_size = 5, max_size = 15) +
labs(title = 'Red Wine Correlation Matrix', caption = 'Visualising linear
relationships between variables') +
theme_minimal()
redWine$quality <- as.numeric(redWine$quality)
ggcorr(redWine[, 2:13], geom = 'circle', min_size = 5, max_size = 15) +
labs(title = 'Red Wine Correlation Matrix', caption = 'Visualising linear
relationships between variables') +
theme_tufte()
